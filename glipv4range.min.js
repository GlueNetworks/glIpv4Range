/*! 
  glIpv4Range v(0.0.2) 
  (c) 2013-2015
  https://gluenetworks.kilnhg.com/Code/Web-Development
  Release Date: 2015-03-11 
*/

angular.module("glIpv4Range", [ "glTextfield" ]), angular.module("glIpv4Range").directive("glIpv4Range", [ "$compile", function(a) {
    "use strict";
    return {
        restrict: "EA",
        replace: !0,
        scope: {
            settings: "=",
            api: "="
        },
        link: function(b, c) {
            // period tabs to next field
            function d(a) {
                190 == a.keyCode && (a.preventDefault(), t[1].find("input").focus());
            }
            function e(a) {
                190 == a.keyCode && (a.preventDefault(), t[2].find("input").focus());
            }
            function f(a) {
                190 == a.keyCode && (a.preventDefault(), t[3].find("input").focus());
            }
            function g(a) {
                190 == a.keyCode && (a.preventDefault(), t[4].find("input").focus());
            }
            function h(a) {
                190 == a.keyCode && a.preventDefault();
            }
            // set segment model values
            function i() {
                b.api._data.ipSegments[0] = b.api1.getValue();
            }
            function j() {
                b.api._data.ipSegments[1] = b.api2.getValue();
            }
            function k() {
                b.api._data.ipSegments[2] = b.api3.getValue();
            }
            function l() {
                b.api._data.ipSegments[3] = b.api4.getValue();
            }
            function m() {
                b.api._data.ipSegments[4] = b.api5.getValue();
            }
            var n, o, p, q, r, s, t = [];
            b.api = b.api || {}, b.api._data = {}, b.api._data.capsLocked = !1, b.api._data.numberMouseOverSpinner = !1;
            var u = "gl-textfield-error", v = "gl-textfield-view-label", w = "gl-textfield-view-value";
            b.api1 = {}, b.api2 = {}, b.api3 = {}, b.api4 = {}, b.api5 = {}, b.api._data.name = angular.isUndefined(b.settings.name) ? void 0 : b.settings.name, 
            b.settings1 = {
                name: "gl-" + b.api._data.name + "-ipv4-seg-1",
                type: "number",
                numberSpinner: !1,
                onKeyUp: i,
                onKeyDown: d
            }, b.settings2 = {
                nane: "gl-" + b.api._data.name + "-ipv4-seg-2",
                type: "number",
                numberSpinner: !1,
                onKeyUp: j,
                onKeyDown: e
            }, b.settings3 = {
                name: "gl-" + b.api._data.name + "-ipv4-seg-3",
                type: "number",
                numberSpinner: !1,
                onKeyUp: k,
                onKeyDown: f
            }, b.settings4 = {
                name: "gl-" + b.api._data.name + "-ipv4-seg-4",
                type: "number",
                numberSpinner: !1,
                onKeyUp: l,
                onKeyDown: g
            }, b.settings5 = {
                name: "gl-" + b.api._data.name + "-ipv4-seg-5",
                type: "number",
                numberSpinner: !1,
                onKeyUp: m,
                onKeyDown: h
            };
            var x = [ '<gl-textfield class="gl-ipv4-1" api="api1" settings="settings1" >', '<gl-textfield class="gl-ipv4-2" api="api2" settings="settings2" >', '<gl-textfield class="gl-ipv4-3" api="api3" settings="settings3" >', '<gl-textfield class="gl-ipv4-4" api="api4" settings="settings4" >', '<gl-textfield class="gl-ipv4-5" api="api5" settings="settings5" >' ], y = '<div class="gl-ipv4-inputs"></div>', z = '<p class="' + u + '">{{api._data.error}}</p>', A = '<label class="' + v + '">{{api._data.label}}</label>', B = '<p class="' + w + '"></p>', C = '<span class="gl-ipv4-segment-seperator">.</span>', D = '<span class="gl-ipv4-segment-seperator">/</span>';
            // MAP SETTINGS
            b.api._data.ipSegments = angular.isUndefined(b.settings.value) ? [] : b.settings.value.split("."), 
            b.api._data.valid = angular.isUndefined(b.settings.valid) ? !0 : b.settings.valid, 
            b.api._data.label = angular.isUndefined(b.settings.label) ? void 0 : b.settings.label, 
            b.api._data.disabled = angular.isUndefined(b.settings.disabled) ? !1 : b.settings.disabled, 
            b.api._data.placeholder = angular.isUndefined(b.settings.placeholder) ? void 0 : b.settings.placeholder, 
            b.api._data.error = angular.isUndefined(b.settings.error) ? void 0 : b.settings.error, 
            b.api._data.editable = angular.isUndefined(b.settings.editable) ? !0 : b.settings.editable, 
            b.api.setInvalid = function(a) {
                b.api._data.valid = !1, b.api1.setInvalid(), b.api2.setInvalid(), b.api3.setInvalid(), 
                b.api4.setInvalid(), b.api5.setInvalid(), b.api._data.error = angular.isString(a) ? a : void 0, 
                H();
            }, b.api.setValid = function() {
                b.api._data.valid = !0, b.api1.setValid(), b.api2.setValid(), b.api3.setValid(), 
                b.api4.setValid(), b.api5.setValid(), H();
            }, b.api.setValue = function(a) {
                angular.isUndefined(a) || angular.isString(a) && 0 == a.length ? (b.api1.setValue(), 
                b.api2.setValue(), b.api3.setValue(), b.api4.setValue(), b.api5.setValue()) : (b.api._data.ipSegments = a.split(/\.|\//), 
                angular.isUndefined(b.api._data.ipSegments) || (angular.isUndefined(parseInt(b.api._data.ipSegments[0])) || b.api1.setValue(parseInt(b.api._data.ipSegments[0])), 
                angular.isUndefined(parseInt(b.api._data.ipSegments[1])) || b.api2.setValue(parseInt(b.api._data.ipSegments[1])), 
                angular.isUndefined(parseInt(b.api._data.ipSegments[2])) || b.api3.setValue(parseInt(b.api._data.ipSegments[2])), 
                angular.isUndefined(parseInt(b.api._data.ipSegments[3])) || b.api4.setValue(parseInt(b.api._data.ipSegments[3])), 
                angular.isUndefined(parseInt(b.api._data.ipSegments[4])) || b.api5.setValue(parseInt(b.api._data.ipSegments[4])))), 
                // update view  mode
                angular.isUndefined(q) || q.html(b.api.getValue());
            }, b.api.getValue = function() {
                var a = b.api._data.ipSegments.slice(0, 4).join("."), c = b.api._data.ipSegments[4];
                return angular.isUndefined(c) || null == c || (a += "/" + b.api._data.ipSegments[4]), 
                a;
            }, b.api.setPlaceholder = function(a) {
                b.api._data.placeholder = a, b.api1.setPlaceholder(a);
            }, b.api.getPlaceholder = function() {
                return b.api._data.placeholder;
            }, b.api.setLabel = function(a) {
                b.api._data.label = a;
            }, b.api.getLabel = function() {
                return b.api._data.label;
            }, b.api.view = function() {
                F();
            }, b.api.edit = function() {
                G();
            }, b.api.disable = function() {
                b.api._data.disabled = !0, b.api1.disable(), b.api2.disable(), b.api3.disable(), 
                b.api4.disable(), b.api5.disable();
            }, b.api.enable = function() {
                b.api._data.disabled = !1, b.api1.enable(), b.api2.enable(), b.api3.enable(), b.api4.enable(), 
                b.api5.enable();
            };
            var E = function() {
                n = angular.element(y), r = angular.element(C), s = angular.element(D);
                for (var c = 0; c < x.length; c++) {
                    var d = x[c], e = angular.element(d);
                    t[c] = e, n.append(t[c]), 3 > c && n.append(r.clone()), 3 == c && n.append(s.clone());
                }
                var f = a(n)(b);
                return b.api._data.disabled && b.api.disable(), f;
            }, F = function() {
                b.api._data.editable = !1, c.children().remove(), angular.isString(b.api._data.label) && (p = a(angular.element(A))(b), 
                c.append(p)), q = a(angular.element(B))(b), q.html(b.api.getValue()), c.append(q);
            }, G = function() {
                b.api._data.editable = !0, c.children().remove(), c.append(E());
                var a = b.api.getValue();
                // init validity
                if (b.api.setValue(a), b.api._data.valid) b.api.setValid(); else {
                    var d = angular.isString(b.api._data.error) ? b.api._data.error : void 0;
                    b.api.setInvalid(d);
                }
                H();
            }, H = function() {
                angular.isUndefined(o) || o.remove(), b.api._data.editable && !b.api._data.valid && angular.isString(b.api._data.error) && (o = a(angular.element(z))(b), 
                c.append(o));
            };
            // INIT
            angular.isString(b.api._data.placeholder) && (b.settings1.placeholder = b.api._data.placeholder), 
            angular.isUndefined(b.settings.view) || 1 != b.settings.view ? G() : F();
        }
    };
} ]);
//# sourceMappingURL=glipv4range.min.js.map