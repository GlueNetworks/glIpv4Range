/*! 
  glTextfield v(0.0.68) 
  (c) 2013-2015
  https://gluenetworks.kilnhg.com/Code/Web-Development
  Release Date: 2015-03-25 
*/

"use strict";

/**
 * @ngdoc overview
 * @name glTextfield
 */
angular.module("glTextfield", []), angular.module("glTextfield", []), angular.module("glTextfield").directive("glTextfield", [ "$compile", "$timeout", function(a, b) {
    return {
        restrict: "EA",
        replace: !0,
        scope: {
            settings: "=",
            api: "="
        },
        link: function(c, d) {
            var e, f, g, h, i = "gl-textfield-input", j = "gl-textfield-error", k = "gl-textfield-view-label", l = "gl-textfield-view-value", m = "gl-invalid", n = "gl-empty", o = "gl-caps-lock", p = "gl-mouse-over", q = "gl-number-up-arrow-pressed", r = "gl-number-down-arrow-pressed", s = "gl-number-mouseover-spinner";
            c.api = c.api || {}, c.api._data = {}, c.api._data.capsLocked = !1, c.api._data.numberMouseOverSpinner = !1, 
            // MAP SETTINGS
            c.api._data.name = angular.isUndefined(c.settings.name) ? void 0 : c.settings.name, 
            c.api._data.id = angular.isUndefined(c.settings.id) ? c.settings.name : c.settings.id, 
            c.api._data.placeholder = angular.isUndefined(c.settings.placeholder) ? angular.isUndefined(c.settings.label) ? void 0 : c.settings.label : c.settings.placeholder, 
            c.api._data.disabled = angular.isUndefined(c.settings.disabled) ? !1 : c.settings.disabled, 
            c.api._data.type = angular.isUndefined(c.settings.type) ? "text" : c.settings.type, 
            c.api._data.max = angular.isUndefined(c.settings.max) ? void 0 : c.settings.max, 
            c.api._data.min = angular.isUndefined(c.settings.min) ? void 0 : c.settings.min, 
            c.api._data.maxLength = angular.isUndefined(c.settings.maxLength) ? void 0 : c.settings.maxLength, 
            c.api._data.step = angular.isUndefined(c.settings.step) ? void 0 : c.settings.step, 
            c.api._data.value = "number" == c.api._data.type ? angular.isUndefined(c.settings.value) ? void 0 : parseInt(c.settings.value) : angular.isUndefined(c.settings.value) ? void 0 : c.settings.value, 
            c.api._data.valid = angular.isUndefined(c.settings.valid) ? !0 : c.settings.valid, 
            c.api._data.label = angular.isUndefined(c.settings.label) ? angular.isUndefined(c.settings.placeholder) ? void 0 : c.settings.placeholder : c.settings.label, 
            c.api._data.error = angular.isUndefined(c.settings.error) ? void 0 : c.settings.error, 
            c.api._data.editable = angular.isUndefined(c.settings.editable) ? !0 : c.settings.editable, 
            c.api._data.onKeyDown = angular.isFunction(c.settings.onKeyDown) ? function(a) {
                c.settings.onKeyDown(a, {
                    id: c.api._data.id,
                    name: c.api._data.name,
                    settings: c.settings
                });
            } : void 0, c.api._data.onKeyPress = angular.isFunction(c.settings.onKeyPress) ? function(a) {
                c.settings.onKeyPress(a, {
                    id: c.api._data.id,
                    name: c.api._data.name,
                    settings: c.settings
                });
            } : void 0, c.api._data.onKeyUp = angular.isFunction(c.settings.onKeyUp) ? function(a) {
                c.settings.onKeyUp(a, {
                    id: c.api._data.id,
                    name: c.api._data.name,
                    settings: c.settings
                });
            } : void 0, c.api._data.onInput = angular.isFunction(c.settings.onInput) ? function(a) {
                c.settings.onInput(a, {
                    id: c.api._data.id,
                    name: c.api._data.name,
                    settings: c.settings
                });
            } : void 0, c.api._data.onFocus = angular.isFunction(c.settings.onFocus) ? function(a) {
                c.settings.onFocus(a, {
                    id: c.api._data.id,
                    name: c.api._data.name,
                    settings: c.settings
                });
            } : void 0, c.api._data.onBlur = angular.isFunction(c.settings.onBlur) ? function(a) {
                c.settings.onBlur(a, {
                    id: c.api._data.id,
                    name: c.api._data.name,
                    settings: c.settings
                });
            } : void 0, c.api._data.onMouseOver = angular.isFunction(c.settings.onMouseOver) ? function(a) {
                c.settings.onMouseOver(a, {
                    id: c.api._data.id,
                    name: c.api._data.name,
                    settings: c.settings
                });
            } : void 0, c.api._data.onMouseOut = angular.isFunction(c.settings.onMouseOut) ? function(a) {
                c.settings.onMouseOut(a, {
                    id: c.api._data.id,
                    name: c.api._data.name,
                    settings: c.settings
                });
            } : void 0, c.api._data.onMouseMove = angular.isFunction(c.settings.onMouseMove) ? function(a) {
                c.settings.onMouseMove(a, {
                    id: c.api._data.id,
                    name: c.api._data.name,
                    settings: c.settings
                });
            } : void 0, c.api._data.onMouseDown = angular.isFunction(c.settings.onMouseDown) ? function(a) {
                c.settings.onMouseDown(a, {
                    id: c.api._data.id,
                    name: c.api._data.name,
                    settings: c.settings
                });
            } : void 0, c.api._data.onMouseUp = angular.isFunction(c.settings.onMouseUp) ? function(a) {
                c.settings.onMouseUp(a, {
                    id: c.api._data.id,
                    name: c.api._data.name,
                    settings: c.settings
                });
            } : void 0, c.api._data.onChange = angular.isFunction(c.settings.onChange) ? function(a) {
                c.settings.onChange(a, {
                    id: c.api._data.id,
                    name: c.api._data.name,
                    settings: c.settings
                });
            } : void 0, // NUMBER settings
            c.api._data.numberSpinner = angular.isUndefined(c.settings.numberSpinner) ? !0 : c.settings.numberSpinner;
            // Templates
            var t = '<input id="' + c.api._data.id + '" title="{{api._data.label}}" name="' + c.api._data.name + '" type="' + c.api._data.type + '" class="' + i + '" placeholder="{{api._data.placeholder}}" data-ng-model="api._data.value" data-ng-value="api._data.value" ';
            t += c.api._data.disabled ? ' disabled="disabled" ' : "", t += angular.isUndefined(c.api._data.max) ? "" : ' max="{{api._data.max}}" ', 
            t += angular.isUndefined(c.api._data.min) ? "" : ' min="{{api._data.min}}" ', t += angular.isUndefined(c.api._data.maxLength) ? "" : ' maxlength="{{api._data.maxLength}}" ', 
            t += angular.isUndefined(c.api._data.step) ? "" : ' step="{{api._data.step}}" ', 
            t += ">";
            var u = '<p class="' + j + '" data-ng-bind="api._data.error"></p>', v = '<label class="' + k + '" data-ng-bind="api._data.label"></label>', w = '<p class="' + l + '" data-ng-bind="api._data.value"></p>', x = function() {
                var a = !1;
                switch (c.api._data.type) {
                  case "text":
                  case "email":
                  case "url":
                  case "tel":
                  case "number":
                  case "search":
                    a = !0;
                }
                return a;
            };
            c.api.setInvalid = function(a) {
                c.api._data.valid = !1, c.api._data.error = angular.isString(a) ? a : void 0, C();
            }, c.api.setValid = function() {
                c.api._data.valid = !0, C();
            }, c.api.setValue = function(a) {
                c.api._data.value = a;
            }, c.api.getValue = function() {
                return c.api._data.value;
            }, c.api.setPlaceholder = function(a) {
                c.api._data.placeholder = a;
            }, c.api.getPlaceholder = function() {
                return c.api._data.placeholder;
            }, c.api.disable = function() {
                c.api._data.disabled = !0, e.attr("disabled", !0);
            }, c.api.enable = function() {
                c.api._data.disabled = !1, e.removeAttr("disabled");
            };
            var y = function() {
                // event bindings
                // filter out letters for number types
                /////////////////////////////////////////////////////////
                // CAPS LOCK
                // END CAPS LOCK
                /////////////////////////////////////////////////////////
                /////////////////////////////////////////////////////////
                // NUMBER SPINNER logic
                // End NUMBER SPINNER logic
                /////////////////////////////////////////////////////////
                // emit events
                return e = angular.element(t), e.val(c.api._data.value), angular.isString(c.api._data.value) && "" != c.api._data.value ? e.removeClass(n) : e.addClass(n), 
                angular.isUndefined(c.api._data.onKeyDown) || e.bind("keydown", c.api._data.onKeyDown), 
                angular.isUndefined(c.api._data.onKeyUp) || e.bind("keyup", c.api._data.onKeyUp), 
                angular.isUndefined(c.api._data.onKeyPress) || e.bind("keypress", c.api._data.onKeyPress), 
                angular.isUndefined(c.api._data.onInput) || e.bind("input", c.api._data.onInput), 
                angular.isUndefined(c.api._data.onBlur) || e.bind("blur", c.api._data.onBlur), angular.isUndefined(c.api._data.onMouseOver) || e.bind("mouseover", c.api._data.onMouseOver), 
                angular.isUndefined(c.api._data.onMouseOut) || e.bind("mouseout", c.api._data.onMouseOut), 
                angular.isUndefined(c.api._data.onMouseMove) || e.bind("mousemove", c.api._data.onMouseMove), 
                angular.isUndefined(c.api._data.onMouseDown) || e.bind("mousedown", c.api._data.onMouseDown), 
                angular.isUndefined(c.api._data.onMouseUp) || e.bind("mouseup", c.api._data.onMouseUp), 
                "number" == c.api._data.type && e.bind("keydown", function(a) {
                    a.keyCode > 64 && a.keyCode < 96 && a.preventDefault();
                }), e.bind("keypress", function(a) {
                    var b = a.charCode || a.keyCode, d = a.shiftKey;
                    b > 96 && 123 > b && d ? (e.removeClass(o), c.api._data.capsLocked = !1) : b > 64 && 91 > b && !d && (e.addClass(o), 
                    c.api._data.capsLocked = !0);
                }), e.bind("keyup keydown", function(a) {
                    {
                        var b = a.charCode || a.keyCode;
                        a.shiftKey;
                    }
                    20 == b && 1 == c.api._data.capsLocked && (e.removeClass(o), c.api._data.capsLocked = !1);
                }), "number" == c.api._data.type && c.api._data.numberSpinner && (e.bind("mouseover", function() {
                    e.addClass(p), // necessary for cursor styling over spinner
                    e.bind("mousemove", function(a) {
                        var b = e[0].getBoundingClientRect(), c = a.offsetX || a.clientX - $(a.target).offset().left, d = a.offsetY || a.clientY - $(a.target).offset().top;
                        c > b.width - 20 ? d < b.height / 2 ? e.addClass(s) : d > b.height / 2 && e.addClass(s) : e.removeClass(s);
                    });
                }), e.bind("mouseout", function() {
                    e.removeClass(p), e.removeClass(s), e.off("mousemove");
                }), e.bind("mousedown", function(a) {
                    var b = e[0].getBoundingClientRect(), c = a.offsetX || a.clientX - $(a.target).offset().left, d = a.offsetY || a.clientY - $(a.target).offset().top;
                    c > b.width - 20 && (d < b.height / 2 ? (e.addClass(q), D()) : d > b.height / 2 && (e.addClass(r), 
                    E()));
                }), e.bind("mouseup", function() {
                    e.removeClass(q), e.removeClass(r);
                })), angular.forEach(c.api._data.emitEvents, function(a) {
                    e.bind(a, function(d) {
                        // sorry for the long wait, but we must let the model and value update each other before emitting.
                        b(function() {
                            c.$emit(c.settings.name + "-" + a, d);
                        }, 0);
                    });
                }), a(e)(c);
            };
            c.$watch("api._data.value", function() {
                B();
            }), // IF CAN VIEW MODE
            x() && (c.api.setLabel = function(a) {
                c.api._data.label = a;
            }, c.api.getLabel = function() {
                return c.api._data.label;
            }, c.api.view = function() {
                z();
            }, c.api.edit = function() {
                A();
            });
            var z = function() {
                c.api._data.editable = !1, d.children().remove(), angular.isString(c.api._data.label) && (g = a(angular.element(v))(c), 
                d.append(g)), h = a(angular.element(w))(c), d.append(h);
            }, A = function() {
                c.api._data.editable = !0, d.children().remove(), d.append(y()), C(), B();
            }, B = function() {
                angular.isUndefined(e) || ("number" == c.api._data.type ? angular.isNumber(c.api._data.value) && null != c.api._data.value ? e.removeClass(n) : e.addClass(n) : angular.isString(c.api._data.value) && c.api._data.value.length > 0 ? e.removeClass(n) : e.addClass(n));
            }, C = function() {
                angular.isUndefined(f) || f.remove(), c.api._data.editable && (c.api._data.valid ? e.removeClass(m) : (e.addClass(m), 
                angular.isString(c.api._data.error) && b(function() {
                    f = a(angular.element(u))(c), // ensure .error has been updated prior to this compile
                    d.append(f);
                }, 0)));
            }, D = function() {
                var a = c.api.getValue();
                a++, isNaN(a) && (a = 0), c.api.setValue(a), e.val(a);
            }, E = function() {
                var a = c.api.getValue();
                a--, isNaN(a) && (a = 0), c.api.setValue(a), e.val(a);
            };
            // INIT
            // we make our own onChange as browsers onchange only fire on blur
            angular.isFunction(c.api._data.onChange) && c.$watch("api._data.value", function() {
                c.api._data.onChange(c.api._data.value);
            }), x() && !angular.isUndefined(c.settings.view) && 1 == c.settings.view ? z() : A();
        }
    };
} ]);
//# sourceMappingURL=gltextfield.min.js.map